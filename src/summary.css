
      <step-1-  Home page>
                --------------------------
  1 - List of tags
    <Home-folder>
    <div class="home-page">

  <div class="banner">
    <div class="container">
      <h1 class="logo-font">conduit</h1>
      <p>A place to share your <i>Angular</i> knowledge.</p>
    </div>
  </div>

  <div class="container page">
    <div class="row">
      <div class="col-md-9">
        <div class="feed-toggle">

          <ul class="nav nav-pills outline-active">

            <li class="nav-item">
              <a class="nav-link">
                 Your Feed
              </a>
            </li>

            <li class="nav-item">
              <a class="nav-link">

                Global Feed
              </a>
            </li>

            <li class="nav-item">
              <a class="nav-link active">
                <i class="ion-pound"></i>
              </a>
            </li>
          </ul>
        </div>


        <div class="col-md-3">
          <div class="sidebar">
            <p>Popular Tags</p>

            <div class="tag-list">
              <a class="tag-default tag-pill">
                1
              </a>
            </div>

            <div>
              Loading tags
            </div>

            <div>
              No tags are here... yet
            </div>

          </div>
        </div>

      </div>
    </div>
  </div>

</div>

  Tasks of Home Component = {
      + List of tags
      + List of articles pulled from either Feed, Global, or by Tag
      + Pagination for list of articles
    }

             <z-------------------------->
  2 - Layout- <Footer-and Header>
    in <shared-folder>
    2-1- <First-> :  Show this for logged out users
     Home | Sign in | Sign up

    <li class="nav-item">
        <a class="nav-link">
          Sign in
        </a>
      </li>
          <z-------------------------->
  3- Add to app.module.ts
    @NgModule({
      declarations: [
        AppComponent,
        FooterComponent,
        HeaderComponent,
      ]
      <z-------------------------->

  4- Add <main.css-in index.html>

  5- <Task-2> List of articles pulled from either Feed, Global, or by Tag
  <app-article-list> = {
    <app-article-preview> = {

        <app-article-meta> = {
          <app-favorite-button>
        },
        itself

    },
    and part of itself
  }
      5-1- Create <article.-model.ts> in @core/models
        + export interface Article {
          slug: string;
          title: string;
          description: string;
          body: string;
          tagList: string[];
          createdAt: string;
          updatedAt: string;
          favorited: boolean;
          favoritesCount: number;
          author: Profile;
        }

      5-2- Create <article-preview.html>

      <a [routerLink]="['/article', article.slug]" class="preview-link">
        <h1>{{ article.title }}</h1>
        <p>{{ article.description }}</p>
        <span>Read more...</span>
        <ul class="tag-list">
          <li class="tag-default tag-pill tag-outline"
          *ngFor="let tag of article.tagList"  >
            {{ tag }}
          </li>
        </ul>
      </a>
    </div>

    5-3- Create <article-preview.ts>
    export class ArticlePreviewComponent {

      NOTE: <article-preview> is the child of <article-list>
      @Input() article: Article;

      constructor() { }

      }

    5-4- create index.ts to export all <article-list / preview / ..>
          export * from './article-preview/article-preview.component';

      + and add to <SharedModule-module.ts>
          import { CommonModule } from '@angular/common';

    5-5- <Task-3> : Pagination for list of articles
      + In <article-list.comp.html>
        nav = ul.pagination

    5-6-
      + Import <Shared-Module> into <Home-Module>
      + Import <Home-Module> into <app-Module>

      + <home-comp> is the parent of <article-list>
          <app-article-list [limit]="10" [config]="listConfig">
        </app-article-list>

    5-7- Create <Home-Routing.module.ts>
        const routes: Routes = [
          {
            path: '',
            component: HomeComponent,
          }
        ];
      + and add <Home-Routing.module.ts> to <Home-Module>

    5-8- Create <app-Routing.module>
        const routes: Routes = [
          // add HomeRouting
          {
            path: '',
            loadChildren: () => import('../app/home/home.module')
              .then(m => m.HomeModule)
          }
        ];

      + and add <app-Routing-module> to <app-module>
      + and add <router-outlet></router-outlet> to <app-.comp.html>

<z-------------------------------------------------------------------------

    <STEP-2> <Login-and-Register-Pages>
      - Sign in/Sign up pages (URL: /#/login, /#/register )
        +  Uses JWT (store the token in localStorage)
        +  Authentication can be easily switched to session/cookie based

        +  Authenticate users via JWT (login/signup pages + logout button on settings page)
        +  CRU* users (sign up & settings page - no deleting required)
                      ------------------
    <step-2-1>: Login and register page

      1 -  Create <auth-component.html>
        => Creating Login / Register Form using ReactiveForm

      2 - Create <auth-comp.ts>

      3- Create <auth-routing.module.ts>
        const routes: Routes = [
          {
            path: 'login',
            component: AuthComponent
          },
          {
            path: 'register',
            component: AuthComponent,
          },
        ];

      4- Create <auth-module.ts>
        + import <Shared-Module>
          @NgModule({
            imports: [
              SharedModule,
              AuthRoutingModule
            ],
            declarations: [
              AuthComponent
            ],
            providers: [
              // NoAuthGuard
            ]
          })
  ********    b/c it will occur ERROR:
          NullInjectorError: No provider for FormBuilder!
      Solution:

        +  import and export : FormsModule, ReactiveFormsModule
                in <Shared-Module>

      5 - Import <Auth-module> into <app-module>

      6- Add links to <header-comp.html>
      <li class="nav-item">
        <a class="nav-link"
          routerLink="/login"
          routerLinkActive="active">
          Sign in
        </a>
      </li>

<z-------------------------------------------------------------------------

    <STEP-3> <How-to Service for Interacting and Authenticating with a Server>

  <s3-1> Lets wire up or <Auth-Component FORM> to the actual login register endpoints on out server

    - <First->: We'll <need-to create a SERVICE> that handles
          <making-requests to the server>
        + Both <Login-and- Register endpoints> require a <POST-request>

      <F-1>: Create the <ApiService->
        - To <POST-data of credentials> to Server

          + Using <API-URL>: in   <environment-folder>

          + in environment.ts and prod.ts
              export const environment = {
                production: false,
                api_url: 'http://localhost:3000/employees'
              };
        =>  See on STEP-1 <api.-service.ts>


      <F-2>: create services/index.ts
            export * from './api.service';

    - <Second->: Create <User-Service>:
      in services/user.service.ts
      + create <attemptAuth-function> try to implement either Login or Register

      1 - Create <user-.model.ts Interface>
            in @core/models/user.model.ts
      2- See STEP 1 on <user-service>

      3 - export in  { services/ index-.ts }
        export * from './user.service';


    - <Third->: Create <core.-module.ts>
        to import
          providers: [
            ApiService,
            UserService
          ]
      + and <import- CoreModule into AppModule>

      5 -


      6 - ERRORs occur on the browser:
          StaticInjectorError(Platform: core)[UserService -> HttpClient]:
          NullInjectorError: No provider for HttpClient!

      => Solution: import and export HttpClientModule,  RouterModule into <shared-module>


      NOTE : after POST request @return An `Observable` of the response,
        with the response body as a JSON object.


      7 - Create the <List-Errors.component>
        contains all the ERRORs of input field
        7-1: Create { core/models/errors.model.ts }
          export class Errors {
            errors: {[key: string]: string} = {};
          }
        + and add into <index.-ts>

        7-2: edit in api.service.ts
            private formatErrors(error: any) {
              return throwError(error.error); }

<z-------------------------------------------------------------------------

    <STEP-4> <Using-directives to SHOW / HIDE Elements for Authenticated Users>

      1 - create ShowAuthedDirective in <shared- / directives />

      2-  declarations and export ShowAuthedDirective in <Shared-module>

      3- import <Shared-module> into <Home-module>

      4-  In <home-comp.html>
          <div class="banner" *appShowAuthed="false">

      PURPOSE:  Using ShowAuthedDirective to confirm whether my apps
                is on <Logged-in status> or Register status

<z-------------------------------------------------------------------------
    <step-5>: Retrieving, Storing and Utilizing a <JWT> for User Authentication

     5 - 1 - When a user logs into a service, the server checks the user’s credentials.
        + If successful, the server encodes the key user data, such as a user ID or the user’s email address into a JSON string. The string is then signed using a secret key. This data is the JSON Web Token. It can be sent back to the client and used by the client to authenticate itself.

        + If a server can validate the token with the appropriate key, it can be sure that it was generated by the authentication server. But it can’t be forged because only the authentication server knows the private key. The authentication can be provided by a service that is separate from the service wanting to restrict access.

    5 - 2 -The codebase for this tutorial works on the following components:

      1. JSON Web Token
      2.Client + localStorage
      3.Back-end + Secure API Endpoints + DB
      4.Authentication Service
      5.User Service
      6.JWT Interceptor
      7.Auth Guard
      8.Error Interceptor

    <S-1> Auth guard:
        create <auth-guard.service.ts> in core/services/

    <S-2> <jwt.-service.ts>
      - To get / save / destroy Token in LocalStorage

      - In index.ts
          export * from './auth-guard.service';
          export * from './jwt.service';

    <s-3>: create <http-.token.interceptor.ts>

      - import to core/interceptors/index.ts

      - add to Injector : by add to Providers in <core-module.ts>

          providers: [
            AuthGuard,
            JwtService,
            httpInterceptorProviders,

      - Purpose for using <http-token.interceptor.ts>:
        + If in localStorage has token => before sending the request
          to Server, we add [ authorization: token ] with token
          to Request
          => purpose: authenticate User and keep Log in

        + If no, make a new Request for authentication

      - and add <core-module > to <app-module>


    <s-4>: make <removeAuth-function> in <user.-service.ts>
        to remove all User's info on the Client (token, data on Observable)

        // 1 - remove JWT from localStorage
            this._jwtService.destroyToken();
    <s-5>
      + First: create <get-function > in <api.-service.ts>
      + Second: Make <getUser-function> in <user.-service.ts>

    <s-6>: + First: create <put-function > in <api.-service.ts>
      + Second: Make <updateUser-function> in <user.-service.ts>

    <s-7>: + First: create <delete-function > in <api.-service.ts>

    <s-8>:
      + import <Shared-Module> into <App-Module>
      so that <header-component.html> can user <*appShowAuth> Directive
     Edit <header.-component.html>
      Create Home | Settings | Log out in the case User logged out

<z-------------------------------------------------------------------------
    <step-6>:
    Make a <logout-section> and <Keep- User login whenever Reloading / Refreshing>
  <s-1>: Make a <Log-out> functionality in nav-bar
      1 - In <Header-component.ts> make a log-out function


  <s-2> Keep User login whenever Reloading / Refreshing
    + In <App-Component.ts>: Try to get User's Token and User Login Status

    export class AppComponent implements OnInit {
      constructor(private _userService: UserService) {}

      ngOnInit() {
        this._userService.getUser();
      }
    }

<z-------------------------------------------------------------------------
    <step-7>: make a Settings component
  + View profile
  + Edit and update Profile
  => Need
  + update user/:id
  + Lack: get user info (_id, username, bio, image, ...)

export class SettingsComponent implements OnInit {
  user: User = { } as User;
  settingsForm: FormGroup;
  isSubmitting = false;

  constructor(private _router: Router,
              private _userService: UserService,
              private fb: FormBuilder) {

    // create form group using the form builder
    this.settingsForm = this.fb.group({
      username: ['', Validators.required],
      email: ['', Validators.required],
      bio: ''
  });
  }

  ngOnInit() {
    /* make a fresh copy of the current user's object
     to place in editable form fields
     make a GET Request
    this._userService.getUser();
    ==> we need to GET data into subscribe()
    + B/c When get data out of subscriber in Observable
      We must place them into <subscribe- method

    */

    let userInfo;
    this._userService.getCurrentUser()
        .subscribe(user => {
          userInfo = user;

          Object.assign(this.user, userInfo);

          console.log(this.user);
          // fill the form
          this.settingsForm.patchValue(this.user);
        });
  }

<s-2--------------------update form >
  updateForm() {
    this.isSubmitting = true;

     /* update the model */
    const dataIsUpdated = this.settingsForm.value;

    this._userService
        .updateUser(dataIsUpdated)
        .subscribe(
          updatedUser => this._router.navigate(['/settings']),
          err => {
            console.log(err);
            this.isSubmitting = false;
          }
        );
  }

  <in-user.service.ts>
      updateUser(newData): Observable<User> {
        return this._apiService.put('/user', newData )
          .pipe(map(data => {
             /* update the current User Observable */
            this.currentUserSubject.next(data);
            return data;
          }));
      }



<z-------------------------------------------------------------------------
  <step-8>: Make <profile-component>

<s-1------------> <make-model>: core/models/profile.model.ts
        export interface Profile {
          username: string;
          image: string;
          bio: string;
          following: boolean;
        }

<s-2------------> <profile-component.html>

<s-3------------> Using <resolve-guard> fo pre-fetch data ::before
        go to <profile-page>

  <first-> profile-resolver.service.ts

  export class ProfileResolver implements Resolve<Profile | never>  {
    constructor(
      private _profileService: ProfileService,
      private _router: Router
    ) {}

    resolve(
      route: ActivatedRouteSnapshot,
      state: RouterStateSnapshot
    ): Observable<any>  {

      /* https://angular.io/guide/router#resolve-guard */
      return this._profileService.getProfile(route.params['username'])
      .pipe(
        catchError((err) => this._router.navigateByUrl('/'))
      );
    }
  }

  <second-> profile.service.ts
 ===> to make a GET request to server

        export class ProfileService {
          constructor(
            private _apiService: ApiService
          ) {}

          getProfile(username: string): Observable<Profile> {
            const nameWithoutBlank = username.split(' ').join('');

            return this._apiService.get('/profiles/' + nameWithoutBlank)
              .pipe(
                map(profile => profile)
              );
          }
        }

  <third-> import ProfilePageComponent and ProfileResolver

        import { ProfilePageComponent } from './profile-component/profile.component';
        import { ProfileResolver } from './profile-resolver.service';

        export const PROFILES_ROUTE = [
          {
            path: ':username',
            component: ProfilePageComponent,
            resolve: {
              profile: ProfileResolver
            }
          }
        ]

  <fourth-> import routing to profile.module.ts
        imports: [
          RouterModule.forChild(PROFILES_ROUTE)
        ],

  <fifth-> In profile.component.ts
      Get data from profile-resolver.service
      export class ProfilePageComponent implements OnInit {
        profile;
        currentUser: User;
        isUser: boolean;

        constructor(
          private _userService: UserService,
          private _route: ActivatedRoute
        ) {
          /* resolve Data from profile-resolver */
          const resolvedData: any = this._route.snapshot.data['profile'];

          /* if resolvedData = empty */
          if (resolvedData === {}) {
            this.isUser = false;
            console.error(resolvedData);
          } else {
            this.profile = resolvedData;
            this.isUser = true;
          }
        }

        ngOnInit() {
        }
      }


<z-------------------------------------------------------------------------
      <step-9>: <uploading-file FormData>

<note---------->: We have a problem
  We can't upload FormData to server NodeJS
      <reason-->
1------ B/c we use post() with body as JSON
  put(path: string, body: object= {}): Observable<any> {
    return this.http.put(
      `${environment.api_url}${path}`,
      JSON.stringify(body)
    );
  =========> Wrong
  =========> B/c  Angular 6 was submitting file <as-binary> instead of form data.
        not JSON
    see: Body = avatar: (binary)

2------ in http.token.interceptor.ts
      const headersConfig = {
        'Content-Type: 'application/json, multiple/form-data’,
        Accept: 'application/json, text/plain, */*'
      };

  =======> Wrong:
  =======> It will override the default Header of FormData
      + boundary will gone
      + referer: will gone

  =======>With FormData, Angular configure Header =
  'content-type': 'multipart/form-data; boundary=----WebKitFormBoundaryfqULmTZjQcqcdSlW',
      referer: 'http://localhost:4200/?avatar=HinhNen.jpg',

      ==> Therefore, we don't need to add 'content-type'
        to Header in http.token.interceptor.ts

      <solution--------------------->
1 - in api.service.ts
  /*
    Submit FormData
  */
  postFormData(path: string, body): Observable<any> {
    return this.http.post(
      `${environment.api_url}${path}`,
      body
    ).pipe(catchError(this.formatErrors));
  }
    <z---------------------------->
2 - in user.service.ts
  /*
    Submit FormData
  */
  uploadAvatar(image): Observable<any> {
    return this._apiService.postFormData('/user/avatar', image)
      .pipe(
        map(data => data)
      );
  }
  <z---------------------------->
3 - in profile.component.ts
      avatar: File;

      selectImage(event) {
        if (event.target.files.length > 0) {
          this.avatar = event.target.files[0] as File;
        }
      }

      onSubmit() {
        const formData =  new FormData();
        formData.append('avatar', this.avatar, this.avatar.name);

         /* upload image to server */
        this._userService.uploadAvatar(formData)
          .subscribe(
            (res) => console.log(res),
            (err) => console.log(err)
          );
      }

<z-----problem>
  4 - /*
    headersConfig = {
        Accept: 'application/json'
      };
  ==> we can login/ update/ getUser/ etc
  b/c 'Content-Type': is not declared
        =>  'Content-Type' : text/plain (default)
   */
  <solution-->
    <so-step-1> in user.service.ts
      isFormData = false;

      updateUser(newData): Observable<User> {
        this.isFormData = false;
        ...
      }
    <so-step-2> in http.interceptor.ts
        constructor(
          private jwtService: JwtService,
          private _userService: UserService
          ) {}

        if (this._userService.isFormData) {
          headersConfig = {
            Accept: 'application/json'
          };
        } else {
          headersConfig = {
            'Content-Type': 'application/json',
            Accept: 'application/json'
          };
        }

3------ Retrieve avatar_url and perform it on apps



<z-------------------------------------------------------------------------
        <step-10>: Editor page to create/edit form articles
        (URL: /#/editor, /#/editor/article-slug-here )
  <s10-1> Create the <editor-page>
        See in github commit "create editor form and page"
1 - Article model
2- Article service
  2-1: create
  + save() for CREATE
      /* // update or create an article */
        save(article: Article): Observable<Article> {
          return this._apiService.post('/articles', article)
              .pipe(map(
                  data => data)
              );
        }
  2-2: add <article-service> to index.ts
        and <providers-> to <core.module.ts>



3- create editor-page folder -> editor-page.component.html

4 - create editor-page folder -> editor-page.component.ts
  4-1----- submitForm()
  updateArticle(values: object) {
    Object.assign(this.article, values);
  }

  submitForm() {
    this.isSubmitting = true;

    // update the model
    this.updateArticle(this.articleForm.value);

    // post the changes
    this.articlesService.save(this.article)
      .subscribe(
        article => {
          console.log('article = ', article);
        },
        error => {
          this.isSubmitting = false;
        }
      );
  }

  4-2----- addTag() and removeTag()
  addTag() {
    // retrieve tag control
    const tag = this.tagField.value;

    // only add tag if it does not exist yet
    if (this.article.tagList.indexOf(tag) === -1 ) {
      this.article.tagList.push(tag);
    }

    // clear the input
    this.tagField.reset('');
  }

  removeTag(tagName: string) {
    this.article.tagList = this.article.tagList.filter(tag => tag !== tagName);
  }

6 - create editor.route.ts
  + contain an array of  path / component
============
  export const EDITOR_ROUTES = [
    {
      path: '',
      component: EditorComponent
    }
  ];

7 - create editor.module.ts
  @NgModule({
    imports: [
      SharedModule,
      RouterModule.forChild(EDITOR_ROUTES)
    ],
    declarations: [
      EditorComponent
    ],
    providers: [
      EditableArticleResolver
    ]

8 - in app.routes.ts
  {
    path: 'articles',
    loadChildren: './editor-page/editor.module#EditorModule'
  }

9 - in header.comp.ts
  + adding
      <li class="nav-item">
        <a class="nav-link"
          routerLink="/articles"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: true }">
          Create Article
        </a>
      </li>


<z-------------------------------------------------------------------------
  <step-11> view Article { article/:slug }

<s11-1>: article-page.component.html

<s11-2>: article-page.component.ts
    export class ArticlePageComponent implements OnInit {
      article: Article;
      currentUser: User;
      canModify: boolean;

      isSubmitting = false;
      isDeleting = false;

      constructor(
        private _route: ActivatedRoute,
        private _userService: UserService
      ) { }

      ngOnInit() {
        // retrieve the prefetched article
        /*
          data = { article: {author,.....} }
          b/c article: ArticleResolver in article.route
        */
        this._route.data.subscribe(
          (data: {article: Article} ) => {
            console.log('data article= ', data.article);
            this.article = data.article;
          }
        );

        this._userService.currentUser$.subscribe(
          (userData: User) => {
            this.currentUser = userData;

            this.canModify = (this.currentUser.username === this.article.author.username);
          }
        );
      }

    }

<s11-3>: editor-page.component.ts
    submitForm() {
      ....
      this.articlesService.save(this.article)
        .subscribe(
          article => {
            this._router.navigateByUrl('/article/' + article.slug);
          },

<s11-4>: app.routes.ts
          {
            path: 'editor',
            loadChildren: './editor-page/editor.module#EditorModule'
          },
          {
            path: 'article',
            loadChildren: './article/article.module#ArticleModule'
          }

<s11-5>: article-resolver.services.ts
          resolve(
            _route: ActivatedRouteSnapshot,
            _state: RouterStateSnapshot
          ): Observable<any> {
            return this._articlesService.get(_route.params['slug'])
              .pipe(catchError(err => this._router.navigateByUrl('/')));
          }

<s11-6>: article.module.ts
          @NgModule({
            imports: [
              SharedModule,
              RouterModule.forChild(ARTICLE_ROUTES)
            ],
            declarations: [
              ArticlePageComponent
            ],
            providers: [
              ArticleResolver
            ]
          })

<s11-7>: article.routes.ts
          export const ARTICLE_ROUTES = [
            {
              path: ':slug',
              component: ArticlePageComponent,
              resolve: {
                article: ArticleResolver
              }
            }
          ];

<s11-8>: article-meta.component.html
            - contain user info (card)
            - is a child of article-page
            => using @Input
            and <ng-content>
          <s11-1>: article-meta.component.ts
          { @Input() article: Article;
          }
<s11-9>: index.ts

<s11-10>: shared.module.ts
const ARTICLES_HELPER = [
    ArticleMetaComponent
]


declarations: [
  // Step 3
  ListErrorsComponent,

  // // step 4
  ...DIRECTIVES,
  ...PIPES,

  ...ARTICLES_HELPER

],


<z-------------------------------------------------------------------------
  <step-12> <5-1> Delete Article -> article-page.component.html


1- article-page.comp.html
/* show only for owner */
      <!-- [hidden]="!canModify" =>  for owner -->
      <span [hidden]="!canModify">

2 -article-page.comp.ts
    deleteArticle() {
      /* When clicking on <Delete> button, button will be disabled*/
      // this.isDeleting = true;

      this._articleService.delete(this.article.slug)
        .subscribe(success => {
          /* using {success} variable => b/c response is only status code {204} */
            /*  go back to root url  */
            this._router.navigateByUrl('/');
          }, error => {
            this.isSubmitting = false;
          }
        );

      /*
      - Problem: If without using .subscribe() when calling
        Http Method => it will not happen
      */
    }

3- article.service.ts

  delete(slug: string) {
    return this._apiService.delete('/articles/' + slug);
  }


<z-------------------------------------------------------------------------
  <step-12> <5-3> Comments section at bottom of page

              <5-3-1> Add new comments
<z-1> article-page.comp.html
=> comment html

<z-2> create <comment.model.ts>
=> add to index.js

<z-3> create <comment.service.ts>
  + add() method

=> add to index.js
=> and declared to core.module.js

<z-4> create article-comment.comp.ts

<z-5> in <article-page.comp.html>
  + design the comment place

<z-6> in <article-page.comp.ts>
  + addComment() method

          <5-3-3> Load all comments when going on the article
<z-1> create getAll() in <comment.service.ts>

<z-2> create populateComments() in <article-page.comp.ts>
  + in ngOnInit() {
    // Load the comments on this article
    this.populateComments();
    }


<z-------------------------------------------------------------------------
    <step-13> 6-2 – List article populated

Summary:
 - ProfileArticles (parent)
    |
    |_ ArticleList (child)
          |
          |_ Article-preview (article sub-description)
              |_ Article-meta (=author info)

<z-------------------------------------------------------------------------
    <step-14>: 6-3- Favorited button and author’s favorited article

- ArticlePreview (the article)
    |
    | _ ArticleMeta (author's info)
          |
          |_ FavoritedButton

<z----idea>:
  + if article.lovers have user._id
  => is favorited
  + else have never favorited
(article.lovers[] contains user that have favorited article)

<z-------------------------------------------------------------------------
    <step-15>: <6-5> Pagination Article List

  ArticleList
    |
    |_ Pagination.component.ts
************NOTE: It all started, i would code { pagination } component
    into article-list.component
    + when it is successful, i have maked { pagination } component individually

  <step-1> Create { Pagination } Component
1/ pagination.service.ts
+ make/calculate { pages: 1 2 3 4 5 or 2 3 4 5 6 }
2/ pagination.comp.html
3/ pagination.comp.ts
  + setPageTo() provide { currentPage } from {page} button

4/ pagination.model

  <step-2> add-in to { article-list } component

  <step-3>  adding link {currentURL + query: ?page=2 or 3 or 4} that based on the
    pageNumber of { page } button
  1/ currentURL is taken from its parent Component { ProfileArticle}
  => profileArticle: profile/:username
  => using @Input()

  **NOTE: ProfileFavorite: url = profile/:username/favorite

  2/ Must add { link + query params } in HMTL for each { page button }

  <a *ngIf="pageNumber!== 1" class="page-link" (click)="setPageTo(pageNumber)"
      [routerLink]="currentUrl" [queryParams]="{'page': pageNumber}">
    {{ pageNumber }}
  </a>

  <step-4> when reloading the  http://localhost:4200/profile/trongrui?page=2
  => we must take { query parameters } from url and go to the { page button [2] }
  => Idea: this.currentPage = {page=2}

    ngOnInit() {
      if (this.config) {
        this.query = this.config;

        /* query parameters
         http://localhost:4200/profile/trongrui?page=2
        _ it is going to page [2]
         <+> unary: will convert string to number (MUST BE)
        _ // when reloading the page with ?page=2 or 3 or whatever else
        // we get the { page } query string
        // and  {page = 2} button will be active

        // http://localhost:4200/profile/trongrui
        // => page = undefined
        */
        const page = +this._route.snapshot.queryParams['page'];

        if (!page) {
          this.currentPage = 1;
        } else {
          this.currentPage = page;
        }

        this.runQuery();
        /* If using <Observable>, whenever we change { page } button =>  url change query parameter
        => the following { this._route.queryParams.subscribe} will subscribe the new data
        this._route.queryParams.subscribe(queryParameters => {
          const page = queryParameters['page'];
        ...
        this.runQuery(); // will run gradually
        }); */
      }
    }


    <problem-1-step-15>: <6-5>
+ when going to {favorite article} by http://localhost:4200/profile/trongrui/favorites?page=7
=> { page =7 }
+ in {my posts article} => we receive http://localhost:4200/profile/trongrui?page=7
=>but maxPage = 6 => page =  1->6
==> ERROR
==> b/c we use { queryParamsHandling="merge" } in profile.comp.html
          /* how to use "routerLinkActive" with queryParams in angular
          https://angular.io/api/router/RouterLinkActive#routerLinkActiveOptions
          https://angular.io/api/router/RouterLink
          => it will add { active } class => if routerLink is exact
          => Solution: queryParamsHandling="merge"

          https://github.com/angular/angular/issues/13205#issuecomment-392648730

          + Ex: http://localhost:4200/profile/trongrui?page=4
          => routerink = http://localhost:4200/profile/trongrui?page=4
          => { active } class is enable
          */

=> <ERROR>: i have never solved this problem


<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
<problem------------------------------------------------------------------>
To enable preloading of all lazy loaded modules, import the PreloadAllModules token from the Angular router package.
<z----- src/app/app-routing.module.ts (preload all)>
RouterModule.forRoot(
  appRoutes,
  {
    enableTracing: true, // <-- debugging purposes only
    preloadingStrategy: PreloadAllModules
  }
)


<x--------------------------->
<Problem- Reloading page but it goes to the /home page>

https://medium.com/@shairez/angular-routing-a-better-pattern-for-large-scale-apps-f2890c952a18
<z------------------------------lazy-loading>

  Component Parent
    |_ ComponentChild

  RoutingParent
    |_ RoutingChild


<z------------------------------eager>


<z-----------------------------look-see>

 RouterModule.forChild([
      { path: 'settings', component: SettingsComponent}
    ])
===> for children component

 RouterModule.forRoot([
      { path: 'settings', component: SettingsComponent}
    ])
=====> for AppComponent


<z------------------------------look-see>
    when we <reload-settings page>
  => it's also a part of AppComponent
  => it's also make getUser()

<x--------------------------->
<problem- appAuth: show-authed.directive.ts>

 Home Signin Sign up => Home Settings Logout


<x--------------------------->
<problem- When get data from subscriber in Observale>
    We must place them into <subscribe- method>


ngOnInit() {
    <!-- make a fresh copy of the current user's object
    to place in editable form fields -->
    let userInfo;
    this._userService.getCurrentUser()
        .subscribe(user => {
          userInfo = user;

          Object.assign(this.user, userInfo);

          console.log(this.user);
          // fill the form
          this.settingsForm.patchValue(this.user);
        });
  }

<x--------------------------->
              <problem---- ERROR>
  StaticInjectorError(Platform: core)[ProfileResolver -> ProfileService]:
  NullInjectorError: No provider for ProfileService!

<solution-------: In core.module.ts >
  providers: [ ProfileService]

<x--------------------------->
<problem----
  ERROR in ./src/app/article/article-page/article-page.component.ts
Module not found: Error: Can't resolve './article-page.component.html'
in 'D:\Documents\Angular-Folder\Angular-RealWorld-Example\src\app\article\article-page'

<solution-------: wrong name : edit name of aritcle -> article
